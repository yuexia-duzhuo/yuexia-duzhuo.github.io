<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows 自定义快捷方式(原创)</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;最近闲来无事于是想要好好整顿一下自己”整洁无瑕”桌面，经过一番大整改之后终于实现了桌面无文件的境界，对此感到颇为满意，但是将所有平常使用软件快捷方式统一放到一个文件夹下问题也随之而来，每次都去找该文件夹真tm累人，于是就想到如果有快捷键可以快速打开文件夹岂不美哉，说做就做经过一番尝试之后发现windows自带功能无法满足我的需求，于是尝试看是否有其他软件可以实现该功能，最终功夫不负有心人找到了 <strong>AutoHotkey!</strong> 那么就开始吧。</p><h1 id="自定义快捷方式"><a href="#自定义快捷方式" class="headerlink" title="自定义快捷方式"></a>自定义快捷方式</h1><h2 id="安装-AutoHotkey"><a href="#安装-AutoHotkey" class="headerlink" title="安装 AutoHotkey"></a>安装 AutoHotkey</h2><p>安装 <strong>AutoHotkey</strong>，可以从 <a href="https://www.autohotkey.com/">AutoHotkey 官方网站</a>下载并安装。</p><h2 id="编写-AutoHotkey-脚本"><a href="#编写-AutoHotkey-脚本" class="headerlink" title="编写 AutoHotkey 脚本"></a>编写 AutoHotkey 脚本</h2><p>通过以下步骤创建一个 AutoHotkey 脚本，使用快捷键来打开指定的文件夹：<br><strong>1. 创建 AutoHotkey 脚本</strong>：</p><ul><li>在桌面或任意文件夹内，右键单击空白处，选择 <strong>新建 &gt; AutoHotkey Script</strong>。</li><li>给脚本文件命名，比如 <code>OpenFolder.ahk</code>。</li></ul><font color="#00b050">补：也可以先将该文件命名为txt文件进行编辑然后将其改为ahk文件</font><p><strong>2. 编辑脚本</strong>：  </p><ul><li>右键单击新创建的脚本文件，选择 <strong>编辑脚本</strong>。</li><li>在文件中输入以下代码：</li></ul><h3 id="打开指定文件夹脚本"><a href="#打开指定文件夹脚本" class="headerlink" title="打开指定文件夹脚本"></a>打开指定文件夹脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">^d::</span><br><span class="line">Run, C:\Path\To\Your\Folder</span><br><span class="line">return</span><br></pre></td></tr></table></figure><p>示例图：<br><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.2.4/%E6%96%87%E7%AB%A0/windows%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/1.png" alt=""></p><p>解释：</p><ul><li><code>^+d</code> 表示 <strong>Ctrl + Shift + D</strong> 的快捷键组合。<code>^</code> 表示 <strong>Ctrl</strong>，<code>+</code> 表示 <strong>Shift</strong>，<code>d</code> 表示 <strong>d</strong> 键。你可以根据需要更改快捷键组合。</li><li><code>Run</code> 命令用于打开指定的文件夹，将 <code>C:\Path\To\Your\Folder</code> 替换为你想打开的文件夹的路径。</li><li><code>return</code> 命令用于标记该热键已经结束，如果不添加该命令会导致其下方热键同样执行</li></ul><h3 id="调整音量脚本"><a href="#调整音量脚本" class="headerlink" title="调整音量脚本"></a>调整音量脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">; 使用 Ctrl + 上箭头增加音量</span><br><span class="line">^Up::</span><br><span class="line">SoundSet, +5</span><br><span class="line">return</span><br><span class="line">; 使用 Ctrl + 下箭头减少音量</span><br><span class="line">^Down::</span><br><span class="line">SoundSet, -5</span><br><span class="line">return</span><br></pre></td></tr></table></figure><p>示例图：</p><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.2.4/%E6%96%87%E7%AB%A0/windows%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/2.png" alt=""></p><p>解释：</p><ul><li><code>;</code> 作用是注释</li><li><code>Up</code> 表示键盘上键，<code>Down</code> 表示键盘下键</li><li><code>soundSet</code> 命令用于调整音量</li></ul><p><strong>3. 保存并运行脚本</strong>：</p><ul><li>保存编辑好的脚本文件。</li><li>双击脚本文件运行它。你会在系统托盘中看到 AutoHotkey 的图标，表示脚本正在运行。</li></ul><h2 id="测试快捷键"><a href="#测试快捷键" class="headerlink" title="测试快捷键"></a>测试快捷键</h2><p>现在，当你按下 <strong>Ctrl + D</strong> 时，系统将打开你指定的文件夹。</p><h2 id="设置脚本开机自启（可选）"><a href="#设置脚本开机自启（可选）" class="headerlink" title="设置脚本开机自启（可选）"></a>设置脚本开机自启（可选）</h2><p>如果你想让这个脚本在 Windows 启动时自动运行，可以将脚本文件的快捷方式放入 <strong>启动文件夹</strong>：</p><ol><li>按下 <strong>Win + R</strong>，输入 <code>shell:startup</code>，然后回车。</li><li>将你创建的 <strong>.ahk</strong> 脚本文件的快捷方式拖动到此文件夹</li></ol><h1 id="系统语法教程"><a href="#系统语法教程" class="headerlink" title="系统语法教程"></a>系统语法教程</h1><p>如果想要系统学习该脚本语法参考一下资源<br><a href="https://wyagd001.github.io/zh-cn/docs/Tutorial.htm">https://wyagd001.github.io/zh-cn/docs/Tutorial.htm</a></p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;通过本篇文章的指导，希望你已经成功地配置了 AutoHotkey 脚本，给你的桌面操作带来了更多的便利和效率，并使你的工作流程更加流畅。AutoHotkey 是一个功能强大的工具，它的灵活性和易用性可以极大地提升你的计算机使用体验。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——感谢阅读，祝你使用愉快！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令部署个人仓库</title>
      <link href="/posts/c4ac5f1f.html"/>
      <url>/posts/c4ac5f1f.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近来突发奇想建立一个自己的blog，一开始是想要租一台vulter服务器或者腾讯，阿里服务器，但是秉持着能白嫖就不花银子的原则，最后决定直接部署在github仓库中，结果就是理想很丰满现实很骨感，在一开始尝试使用<code>git</code>命令来将当前目录下的所有文件部署到自己github上就遇到了各种问题，最后花了不少时间才将各种问题进行解决，于是就诞生出了这篇blog，来纪念当初自己走过的坑~~ 废话不多说咱就开始吧。</p><h1 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h1><p>为了更好理解<code>git</code>命令，最好先对四个区间有一个大致印象</p><ul><li>工作区：实际编辑，需改文件的区间，在<code>git add</code>命令之间</li><li>缓存区：临时存放编辑好了，修改好了文件的区间，在<code>git add</code>命令之后，<code>git commit</code>命令之前</li><li>本地仓库：本地存储历史项目的仓库（也就是使用了<code>git init</code>命令的目录）</li><li>远程仓库：托管在一些Github，GitLab等平台上的仓库</li></ul><font color="#00b050">示例图：</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[工作区] --&gt;|git add| B[缓存区]</span><br><span class="line">    B --&gt;|git commit| C[本地仓库]</span><br><span class="line">    C --&gt;|git push| D[远程仓库]</span><br><span class="line">    C --&gt;|git pull/fetch| D</span><br><span class="line">    C --&gt;|git checkout/reset| B</span><br><span class="line">    B --&gt;|git restore| A</span><br></pre></td></tr></table></figure><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="本地库创建"><a href="#本地库创建" class="headerlink" title="本地库创建"></a>本地库创建</h2><p>1.使用命令<code>git init</code> 将当前目录初始化为一个仓库，会在当前目录下自动创建一个.git文件夹，该文件夹会记录git版本控制相关信息</p><font color="#00b050">补：</font>`git init` <font color="#00b050">无论是位于windows系统还是linux系统使用之前都需要安装git软件，具体安装这里就不再赘述</font><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E6%9C%AC%E5%9C%B0%E5%BA%93%E5%88%9B%E5%BB%BA/1.png" alt=""></p><font color="#00b050">.git文件夹中文件示例图：</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.git</span><br><span class="line">├── HEAD</span><br><span class="line">├── config</span><br><span class="line">├── description</span><br><span class="line">├── hooks</span><br><span class="line">│   ├── applypatch-msg.sample</span><br><span class="line">│   ├── commit-msg.sample</span><br><span class="line">│   ├── fsmonitor-watchman.sample</span><br><span class="line">│   ├── post-update.sample</span><br><span class="line">│   ├── pre-applypatch.sample</span><br><span class="line">│   ├── pre-commit.sample</span><br><span class="line">│   ├── pre-merge-commit.sample</span><br><span class="line">│   ├── pre-push.sample</span><br><span class="line">│   ├── pre-rebase.sample</span><br><span class="line">│   ├── pre-receive.sample</span><br><span class="line">│   ├── prepare-commit-msg.sample</span><br><span class="line">│   └── update.sample</span><br><span class="line">├── info</span><br><span class="line">│   └── exclude</span><br><span class="line">├── objects</span><br><span class="line">│   ├── info</span><br><span class="line">│   └── pack</span><br><span class="line">├── refs</span><br><span class="line">│   ├── heads</span><br><span class="line">│   └── tags</span><br><span class="line">└── logs</span><br><span class="line">    ├── HEAD</span><br><span class="line">    └── refs</span><br><span class="line">        ├── heads</span><br><span class="line">        └── tags</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;[随便一个用户名]&quot;</span><br><span class="line">git config --global user.email &quot;[随便一个邮箱]&quot;</span><br></pre></td></tr></table></figure><p>上述步骤作用是告诉其他仓库，本地仓库的所有者的用户名以及邮箱是多少，如果这一步命令不执行那么就无法进行之后的文件夹部署等操作</p><font color="#00b050">补：其中的</font>`--global`<font color="#00b050">作用表示全局，如果是linux系统其会创建一个~/.gitconfig文件，如果是windwos系统其会创建一个C:\users\Yourusername\.gitconfig文件,也就是说只要你使用同一个主机用户，如administrator ，lenvo，root，toor....只需要设置这一次，此后位于其他目录底下的库也是用的是该设置用户名以及邮箱，如果不使用</font>`--global`<font color="#00b050">那么只有在当前目录库使用的是该用户和邮箱换了一个目录就要再重新使用该命令</font><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E6%9C%AC%E5%9C%B0%E5%BA%93%E5%88%9B%E5%BB%BA/2.png" alt=""></p><font color="#00b050">补：也可以使用命令查看自己配置的用户名和邮箱</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h2 id="分支设立"><a href="#分支设立" class="headerlink" title="分支设立"></a>分支设立</h2><h3 id="分支说明"><a href="#分支说明" class="headerlink" title="分支说明"></a>分支说明</h3><p>git版本库存储了所有的历史版本和修改的记录，其存储结构可以理解成一个“树”状的图（并不等同于离散数学中的“树“），一个典型的版本结构如下图所示。</p><font color="#00b050">注：2022版本之后github默认主分支已经改为了main分支</font><p><img src="https://raw.githubusercontent.com/Eric-Song-Love-Coding/git_document/master/picture/git_branch_1.png" alt="git_branch_1"><br>图中每个结点均代表了一个版本号。可以看到，我们初始只有主分支（master）上的第一个版本，然后由此版本引出了branchA分支。自此主分支和branchA分支平行前进，互不干扰。主分支在分出branchA分支后，还可以继续分出branchB分支，只不过branchB分支的开始版本与主分支的第二个版本相同。branchA分支依然可以继续分出branchC分支，这些分支依然是平行前进互不干扰的。分支还可以进行合并，如branchA分支的最后并入了主分支，合成了一个新的版本。在分支合并时，主分支上的版本很可能不再是branchA分支分出时的版本，当前版本很可能与branchA分支的当前版本相冲突，这时就需要开发人员解决冲突，git也为我们提供了相关的工具。分支的合并实际上是在两个分支上都进行了一次提交，使得两个分支上的版本相同，而不一定要消灭掉某个子分支。比如branchB与主分支合并后，branchB并没有被删除，而是继续开发。 </p><h3 id="分支设立-1"><a href="#分支设立-1" class="headerlink" title="分支设立"></a>分支设立</h3><p>查看当前默认分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch</span><br></pre></td></tr></table></figure><p>设立默认初始分支为main，以后所有仓库初始化（<code>git init</code>）默认分支为main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><p>设立当前所使用分支为main</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m main</span><br></pre></td></tr></table></figure><font color="#00b050">补：-m 参数作用是重命名当前分支为main，如果已经是main分支不会发生任何变化</font><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%88%86%E6%94%AF%E8%AE%BE%E7%AB%8B/1.png" alt=""></p><h2 id="文件缓存区添加"><a href="#文件缓存区添加" class="headerlink" title="文件缓存区添加"></a>文件缓存区添加</h2><h3 id="工作区文件编辑，修改"><a href="#工作区文件编辑，修改" class="headerlink" title="工作区文件编辑，修改"></a>工作区文件编辑，修改</h3><p>位于最开始初始化仓库目录底下随便创建一个test.txt文件，使用<code>git status</code> 命令可以查看相关文件，该表示该文件位于工作区得到了修改<br><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E5%8C%BA%E6%B7%BB%E5%8A%A0/1.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E5%8C%BA%E6%B7%BB%E5%8A%A0/2.png" alt=""></p><h3 id="工作区文件添加到缓存区"><a href="#工作区文件添加到缓存区" class="headerlink" title="工作区文件添加到缓存区"></a>工作区文件添加到缓存区</h3><p>接下来要将工作区中的文件添加到缓存区中，使用<code>git add .</code> 表示将当前目录下所有修改过的文件添加到缓存区中，然后使用<code>git status</code> 再次查看可以发现内容已经发生了变化。<br><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E5%8C%BA%E6%B7%BB%E5%8A%A0/3.png" alt=""></p><font color="#00b050">补：可以使用命令</font>`git rm --cache [指定文件名]` <font color="#00b050">将缓存区中的文件进行删除</font><h2 id="缓存区文件添加到本地仓库"><a href="#缓存区文件添加到本地仓库" class="headerlink" title="缓存区文件添加到本地仓库"></a>缓存区文件添加到本地仓库</h2><p>使用命令<code>git commit -m &quot;第一次提交&quot;</code> 将缓存区内容添加到本地仓库中</p><font color="#00b050">补：上述</font>`-m` <font color="#00b050">作用是针对于此次提交到本地仓库内容的说明，这一选项必须要有</font><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E7%BC%93%E5%AD%98%E5%8C%BA%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/1.png" alt=""></p><p>使用命令<code>git log</code> 查看至今未知所有提交记录</p><h2 id="将本地仓库内容转移到远程仓库"><a href="#将本地仓库内容转移到远程仓库" class="headerlink" title="将本地仓库内容转移到远程仓库"></a>将本地仓库内容转移到远程仓库</h2><h3 id="获取远程仓库https链接"><a href="#获取远程仓库https链接" class="headerlink" title="获取远程仓库https链接"></a>获取远程仓库https链接</h3><p>登录自己github账号，随便创建一个仓库，例如我这使用的是test仓库，点击仓库的code然后复制其中的https内容</p><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/2.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/3.png" alt=""></p><h3 id="连接远程仓库"><a href="#连接远程仓库" class="headerlink" title="连接远程仓库"></a>连接远程仓库</h3><p>进行连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin [刚才复制的https内容]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/4.png" alt=""></p><p>使用<code>git remote -v</code>查看连接是否成功，如果出现一下内容表示连接成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin  https://github.com/yuexia-duzhuo/test.git (fetch)</span><br><span class="line">origin  https://github.com/yuexia-duzhuo/test.git (push)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/5.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/6.png" alt=""></p><h3 id="本地仓库文件推送到远程仓库"><a href="#本地仓库文件推送到远程仓库" class="headerlink" title="本地仓库文件推送到远程仓库"></a>本地仓库文件推送到远程仓库</h3><p>使用命令<code>git push origin main</code> 将本地仓库内容推送到远程仓库但是如果出现了下述告警</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> ! [rejected]        main -&gt; main (non-fast-forward)</span><br><span class="line">error: failed to push some refs to &#x27;https://github.com/yuexia-duzhuo/test.git&#x27;</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. If you want to integrate the remote changes,</span><br><span class="line">hint: use &#x27;git pull&#x27; before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure><p>表示在·使用push之前需要先使用<code>git pull</code> 先将远程仓库文件放入本地仓库，所以先使用命令<br><code>git pull origin main --allow-unrelated-histories</code></p><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/7.png" alt=""><br>然后会自动进入一个文件中，退出具体参考linux系统中vi工具编辑如何退出，也就是按照下述步骤</p><font color="#00b050">补：</font>`--allow-unrelated-histories` <font color="#00b050">作用是允许两个不存在共同历史节点的分支进行合并</font><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按ESC--&gt;按shift同时按;--&gt;按w，q，!--&gt;按Enter键</span><br></pre></td></tr></table></figure><p>然后再次使用命令<code>git push origin main</code> 就会显示成功</p><p><img src="https://cdn.jsdelivr.net/gh/yuexia-duzhuo/CDN@1.1.3/%E6%96%87%E7%AB%A0/git%E5%91%BD%E4%BB%A4%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E4%BB%93%E5%BA%93/%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%86%85%E5%AE%B9%E8%BD%AC%E7%A7%BB%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/8.png" alt=""><br>并且github中也会显示出我们之前在自己仓库中的test.txt文件</p><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>希望这篇博客能为有类似需求的朋友提供帮助，少走一些弯路。如果你在部署过程中遇到任何问题，别忘了：坚持和探索是解决所有技术难题的关键。祝大家在构建和维护自己的博客之旅中顺利前行！</p><p>补充：博主是技术萌新这篇博客也是我的第一篇blog，如果有什么问题请麻烦尽管评论区提出~~<br>感谢阅读，期待在评论区与大家交流经验与心得。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> git </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
